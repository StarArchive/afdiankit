"""DO NOT EDIT THIS FILE!

This file is automatically @generated by afdiankit using the follow command:

    python -m codegen && isort . && black .
"""


from typing import TYPE_CHECKING, Dict, Literal, Optional, overload

if TYPE_CHECKING:
    from afdiankit import AfdianCore
    from afdiankit.response import Response


class PostClient:
    def __init__(self, afdian: "AfdianCore"):
        self._afdian = afdian

    def post_post_publish(
        self,
    ):
        url = "/api/post/publish"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_post_publish(
        self,
    ):
        url = "/api/post/publish"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def post_post_delete(
        self,
    ):
        url = "/api/post/delete"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_post_delete(
        self,
    ):
        url = "/api/post/delete"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def get_post_list(
        self,
    ):
        url = "/api/post/get-list"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_post_list(
        self,
    ):
        url = "/api/post/get-list"

        return await self._afdian.arequest(
            "GET",
            url,
        )

    def post_post_like(
        self,
    ):
        url = "/api/post/like"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_post_like(
        self,
    ):
        url = "/api/post/like"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def post_post_unlike(
        self,
    ):
        url = "/api/post/unlike"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_post_unlike(
        self,
    ):
        url = "/api/post/unlike"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def get_post_get_detail(
        self,
    ):
        url = "/api/post/get-detail"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_post_get_detail(
        self,
    ):
        url = "/api/post/get-detail"

        return await self._afdian.arequest(
            "GET",
            url,
        )

    def get_rec_list(
        self,
    ):
        url = "/api/post/get-rec-list"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_rec_list(
        self,
    ):
        url = "/api/post/get-rec-list"

        return await self._afdian.arequest(
            "GET",
            url,
        )

    def get_my_rec_list(
        self,
    ):
        url = "/api/post/get-my-rec-list"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_my_rec_list(
        self,
    ):
        url = "/api/post/get-my-rec-list"

        return await self._afdian.arequest(
            "GET",
            url,
        )

    def post_top(
        self,
    ):
        url = "/api/post/top"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_top(
        self,
    ):
        url = "/api/post/top"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def post_untop(
        self,
    ):
        url = "/api/post/untop"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_untop(
        self,
    ):
        url = "/api/post/untop"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def post_post_top_group(
        self,
    ):
        url = "/api/post/top-group"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_post_top_group(
        self,
    ):
        url = "/api/post/top-group"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def post_post_untop_group(
        self,
    ):
        url = "/api/post/untop-group"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_post_untop_group(
        self,
    ):
        url = "/api/post/untop-group"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def post_edit_vote(
        self,
    ):
        url = "/api/post/edit-vote"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_edit_vote(
        self,
    ):
        url = "/api/post/edit-vote"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def get_get_vote(
        self,
    ):
        url = "/api/post/get-vote"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_get_vote(
        self,
    ):
        url = "/api/post/get-vote"

        return await self._afdian.arequest(
            "GET",
            url,
        )

    def post_cast_vote(
        self,
    ):
        url = "/api/post/cast-vote"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_cast_vote(
        self,
    ):
        url = "/api/post/cast-vote"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def post_update_user_feed_setting(
        self,
    ):
        url = "/api/post/update-user-feed-setting"

        return self._afdian.request(
            "POST",
            url,
        )

    async def async_post_update_user_feed_setting(
        self,
    ):
        url = "/api/post/update-user-feed-setting"

        return await self._afdian.arequest(
            "POST",
            url,
        )

    def get_blocked_creators(
        self,
    ):
        url = "/api/post/get-blocked-creators"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_blocked_creators(
        self,
    ):
        url = "/api/post/get-blocked-creators"

        return await self._afdian.arequest(
            "GET",
            url,
        )
