{% from "header.jinja" import header %}

"""{{ header() }}"""

{% from "client/_param.py.jinja" import endpoint_params, endpoint_raw_params, endpoint_model_params %}
{% from "client/_request.py.jinja" import build_request, build_request_params %}

{% for endpoint in endpoints %}
{% if endpoint.method == 'post' %}
from afdiankit.utils import UNSET, Missing
from .types import {{ pascal_case(snake_case(endpoint.name)) }}RequestBody
{% endif %}
{% endfor %}

from typing import TYPE_CHECKING, Dict, Literal, Optional, overload

from pydantic import BaseModel, TypeAdapter

from afdiankit.utils import exclude_unset

if TYPE_CHECKING:
    from afdiankit import AfdianCore
    from afdiankit.response import Response

class {{ pascal_case(tag) }}Client:
    def __init__(self, afdian: "AfdianCore"):
        self._afdian = afdian

    {% for endpoint in endpoints %}
    def {{ snake_case(endpoint.name) }}(
        self,
        {{ endpoint_params(endpoint) | indent(8) }}
    ):
        {{ build_request(endpoint) | indent(8) }}
        return self._afdian.request(
            {{ build_request_params(endpoint) | indent(12) }}
        )

    async def async_{{ snake_case(endpoint.name) }}(
        self,
        {{ endpoint_params(endpoint) | indent(8) }}
    ):
        {{ build_request(endpoint) | indent(8) }}
        return await self._afdian.arequest(
            {{ build_request_params(endpoint) | indent(12) }}
        )

    {% endfor %}
